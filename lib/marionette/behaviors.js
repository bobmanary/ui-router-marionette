// Generated by CoffeeScript 1.11.1
(function() {
  var Mn, Router, UISref, UISrefActive,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Mn = require('backbone.marionette');

  Router = require('../router').Router;

  exports.UISref = UISref = (function(superClass) {
    extend(UISref, superClass);

    function UISref() {
      return UISref.__super__.constructor.apply(this, arguments);
    }

    UISref.prototype.ui = {
      sref: '[ui-sref]'
    };

    UISref.prototype.events = {
      'click @ui.ref': 'onClickLink'
    };

    UISref.prototype.onClickLink = function() {};

    UISref.prototype.onAttach = function() {
      var router;
      router = Router.getInstance();
      return this.ui.sref.each(function(i, e) {
        var params, state, url;
        e = $(e);
        state = e.attr('ui-sref');
        try {
          params = JSON.parse(e.attr('ui-sparams'));
        } catch (error) {}
        url = router.stateService.href(state, params);
        e.attr('href', url);
        return e.click(function(event) {
          var button;
          button = event.which;
          if (button > 1 || event.shiftKey || event.metaKey || event.altKey || event.ctrlKey || e.attr('target')) {
            return;
          }
          router.stateService.go(state, params);
          return event.preventDefault();
        });
      });
    };

    return UISref;

  })(Mn.Behavior);

  exports.UISrefActive = UISrefActive = (function(superClass) {
    extend(UISrefActive, superClass);

    function UISrefActive() {
      return UISrefActive.__super__.constructor.apply(this, arguments);
    }

    UISrefActive.prototype.ui = {
      active: '[ui-sref-active]'
    };

    UISrefActive.prototype.defaults = {
      activeClasses: 'ui-state-active',
      applyToRoot: false,
      modelStateField: 'state'
    };

    UISrefActive.prototype.initialize = function() {
      this.router = Router.getInstance();
      return this.deregister = this.router.transitionService.onSuccess({}, (function(_this) {
        return function(transition) {
          return _this.onStateChange();
        };
      })(this));
    };

    UISrefActive.prototype.onRender = function() {
      return this.onStateChange();
    };

    UISrefActive.prototype.onStateChange = function() {
      var classFn, compareState, ref;
      if (this.getOption('applyToRoot')) {
        compareState = (ref = this.view.model) != null ? ref.get(this.getOption('modelStateField')) : void 0;
        if (compareState != null) {
          classFn = this.router.stateService.includes(compareState) ? 'addClass' : 'removeClass';
          this.$el[classFn](this.options.activeClasses);
        }
      }
      return this.ui.active.each((function(_this) {
        return function(i, el) {
          var $el, params;
          $el = $(el);
          params = $el.attr('ui-sparams');
          if (params) {
            params = JSON.parse(params);
          }
          compareState = $el.attr('ui-sref-active') || $el.attr('ui-sref');
          classFn = _this.router.stateService.includes(compareState, params) ? 'addClass' : 'removeClass';
          return $el[classFn](_this.options.activeClasses);
        };
      })(this));
    };

    UISrefActive.prototype.onBeforeDestroy = function() {
      return this.deregister();
    };

    UISrefActive.prototype.removeListeners = function() {
      return this.ui.active.off('ui:state:change');
    };

    return UISrefActive;

  })(Mn.Behavior);

}).call(this);
