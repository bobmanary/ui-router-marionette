// Generated by CoffeeScript 1.11.1
(function() {
  var Mn, ResolveContext, UIViewMarionette, id,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  id = 0;

  Mn = require('backbone.marionette');

  ResolveContext = require('ui-router-core').ResolveContext;

  exports.UIViewMarionette = UIViewMarionette = (function(superClass) {
    extend(UIViewMarionette, superClass);

    function UIViewMarionette() {
      return UIViewMarionette.__super__.constructor.apply(this, arguments);
    }

    UIViewMarionette.prototype.initialize = function(router, mnLayout, mnRegion, mnRegionName) {
      var name, parentContext, parentFqn, ref, ref1, ref2, ref3, ref4, ref5, ref6;
      this.router = router;
      this.mnRegion = mnRegion;
      this.listenTo(mnLayout, "before:destroy", this.destroy);
      name = mnRegionName || '$default';
      parentContext = mnLayout != null ? (ref = mnLayout.parent) != null ? (ref1 = ref.uiView) != null ? (ref2 = ref1.activeUIView.config) != null ? (ref3 = ref2.viewDecl) != null ? ref3.$context : void 0 : void 0 : void 0 : void 0 : void 0;
      parentFqn = mnLayout != null ? (ref4 = mnLayout.parent) != null ? (ref5 = ref4.uiView) != null ? (ref6 = ref5.activeUIView) != null ? ref6.fqn : void 0 : void 0 : void 0 : void 0;
      return this.activeUIView = {
        $type: 'backbone',
        id: id++,
        name: name,
        fqn: parentFqn ? parentFqn + "." + name : name,
        creationContext: parentContext || this.router.stateRegistry.root(),
        configUpdated: (function(_this) {
          return function(config) {
            return _this.onConfigUpdated(config);
          };
        })(this),
        config: void 0
      };
    };

    UIViewMarionette.prototype.register = function() {
      return this.deregister = this.router.viewService.registerUIView(this.activeUIView);
    };

    UIViewMarionette.prototype.onConfigUpdated = function(newConfig) {
      if (!newConfig) {
        return this.clearPreviousConfig();
      }
      if (newConfig.viewDecl.$type !== 'backbone') {
        return;
      }
      if (this.activeUIView.config === newConfig) {
        return;
      }
      return this.updateView(newConfig);
    };

    UIViewMarionette.prototype.updateView = function(newConfig) {
      var controller, resolved, state, view;
      this.activeUIView.config = newConfig;
      resolved = this.getResolved(newConfig);
      view = this.getView(newConfig, {
        resolved: resolved
      });
      controller = this.getController(newConfig, {
        resolved: resolved,
        view: view
      });
      if (view != null) {
        this.mnRegion.show(view);
        if (controller != null) {
          controller.triggerMethod("ui:view:show");
          this.listenToOnce(view, "destroy", function() {
            return controller.destroy();
          });
        }
      }
      state = newConfig.path[newConfig.path.length - 1].state.self;
      return this.registerEventCallbacks(state, view, controller);
    };

    UIViewMarionette.prototype.getResolved = function(config) {
      var context, i, key, keys, len, resolved;
      context = new ResolveContext(config.path);
      resolved = {};
      keys = _.filter(context.getTokens(), function(token) {
        return typeof token === 'string';
      });
      for (i = 0, len = keys.length; i < len; i++) {
        key = keys[i];
        resolved[key] = context.getResolvable(key).data;
      }
      return resolved;
    };

    UIViewMarionette.prototype.getView = function(config, viewOptions) {
      var ref, view;
      if ((config != null ? (ref = config.viewDecl) != null ? ref.view : void 0 : void 0) != null) {
        return view = new config.viewDecl.view(viewOptions);
      }
    };

    UIViewMarionette.prototype.getController = function(config, controllerOptions) {
      var ref;
      if ((config != null ? (ref = config.viewDecl) != null ? ref.controller : void 0 : void 0) != null) {
        return new config.viewDecl.controller(controllerOptions);
      }
    };

    UIViewMarionette.prototype.registerEventCallbacks = function(state, view, controller) {
      var criteria;
      criteria = {
        exiting: state.name
      };
      if (view != null) {
        this.registerExitCallback(view, criteria);
      }
      if (controller != null) {
        return this.registerExitCallback(controller, criteria);
      }
    };

    UIViewMarionette.prototype.registerExitCallback = function(component, criteria) {
      var deregisterFn;
      if (typeof component.uiCanExit === 'function') {
        deregisterFn = this.router.transitionService.onBefore(criteria, component.uiCanExit, {
          bind: component
        });
        return component.on("destroy", function() {
          return console.log("dregistering uiCanExit for " + criteria.exiting) && deregisterFn();
        });
      }
    };

    UIViewMarionette.prototype.clearPreviousConfig = function() {
      var ref;
      this.mnRegion.empty();
      (this.activeUIView.view != null) && ((ref = this.activeUIView.controller) != null ? ref.triggerMethod('view:destroyed') : void 0);
      return this.activeUIView.config = void 0;
    };

    UIViewMarionette.prototype.onBeforeDestroy = function() {
      return typeof this.deregister === "function" ? this.deregister() : void 0;
    };

    return UIViewMarionette;

  })(Mn.Object);

}).call(this);
