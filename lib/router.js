// Generated by CoffeeScript 1.10.0
(function() {
  var $q, MnViewConfig, UIRouter, UIRouterMarionette, UIViewMarionette, hashLocationPlugin, mnViewsBuilder, ref, ref1, ref2, routerInstance, servicesPlugin, viewConfigFactory,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ref = require('ui-router-core'), UIRouter = ref.UIRouter, $q = ref.$q;

  ref1 = require('./state_views_builder'), mnViewsBuilder = ref1.mnViewsBuilder, MnViewConfig = ref1.MnViewConfig;

  ref2 = require('ui-router-core/lib/vanilla'), hashLocationPlugin = ref2.hashLocationPlugin, servicesPlugin = ref2.servicesPlugin;

  UIViewMarionette = require('./uiview').UIViewMarionette;

  routerInstance = null;

  viewConfigFactory = function(node, config) {
    return new MnViewConfig(node, config);
  };

  UIRouterMarionette = (function(superClass) {
    extend(UIRouterMarionette, superClass);

    UIRouterMarionette.getInstance = function() {
      return routerInstance || (routerInstance = new this);
    };

    function UIRouterMarionette() {
      UIRouterMarionette.__super__.constructor.apply(this, arguments);
      this._started = false;
      this.viewService._pluginapi._viewConfigFactory('backbone', viewConfigFactory);
      this.plugin(servicesPlugin);
      this.plugin(hashLocationPlugin);
      this.stateRegistry.decorator("views", mnViewsBuilder);
      routerInstance = this;
    }

    UIRouterMarionette.prototype.addState = function(def) {
      this.stateRegistry.register(def);
      return this;
    };

    UIRouterMarionette.prototype.start = function(rootRegion, options) {
      this.rootRegion = rootRegion;
      if (this._started) {
        throw new Error("Router was already started");
      }
      if (options != null) {
        this.handleOptions(options);
      }
      this.rootRegion.uiView = new UIViewMarionette(this, null, this.rootRegion, "");
      this.rootRegion.uiView.register();
      this.urlMatcherFactory.$get();
      this.urlService.listen();
      this.urlService.sync();
      this._started = true;
      return this;
    };

    UIRouterMarionette.prototype.handleOptions = function(options) {
      if (typeof options.onMnRoute === 'function') {
        return this.onMnRoute(options.onMnRoute);
      }
    };

    UIRouterMarionette.prototype.onMnRoute = function(onRoute) {
      var oldProcessOnRoute, uiRouter;
      oldProcessOnRoute = Marionette.AppRouter.prototype._processOnRoute;
      uiRouter = this;
      return Marionette.AppRouter.prototype._processOnRoute = function(mnRouteName, mnRouteArgs) {
        var mnRoutePath;
        mnRoutePath = _.invert(this.getOption('appRoutes'))[mnRouteName];
        onRoute.call(this, mnRouteName, mnRouteArgs, mnRoutePath, uiRouter.stateService);
        return oldProcessOnRoute.call(this, mnRouteName, mnRouteArgs);
      };
    };

    return UIRouterMarionette;

  })(UIRouter);

  exports.UIViewMarionette = UIViewMarionette;

  exports.Router = UIRouterMarionette;

}).call(this);
