// Generated by CoffeeScript 1.11.1
(function() {
  var MnViewConfig, UIRouter, UIRouterMarionette, UIViewMarionette, getStateHookBuilder, hashLocationPlugin, mnViewsBuilder, ref, ref1, routerInstance, servicesPlugin, viewConfigFactory,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  UIRouter = require('ui-router-core').UIRouter;

  ref = require('./state_views_builder'), mnViewsBuilder = ref.mnViewsBuilder, MnViewConfig = ref.MnViewConfig;

  ref1 = require('ui-router-core/lib/vanilla'), hashLocationPlugin = ref1.hashLocationPlugin, servicesPlugin = ref1.servicesPlugin;

  UIViewMarionette = require('./uiview').UIViewMarionette;

  getStateHookBuilder = require('./hook_builder');

  routerInstance = null;

  viewConfigFactory = function(node, config) {
    return new MnViewConfig(node, config);
  };

  UIRouterMarionette = (function(superClass) {
    extend(UIRouterMarionette, superClass);

    UIRouterMarionette.getInstance = function() {
      return routerInstance || (routerInstance = new this);
    };

    function UIRouterMarionette() {
      UIRouterMarionette.__super__.constructor.apply(this, arguments);
      this._started = false;
      this.viewService._pluginapi._viewConfigFactory('backbone', viewConfigFactory);
      this.plugin(servicesPlugin);
      this.plugin(hashLocationPlugin);
      this.stateRegistry.decorator("views", mnViewsBuilder);
      this.stateRegistry.decorator("onExit", getStateHookBuilder("onExit"));
      this.stateRegistry.decorator("onRetain", getStateHookBuilder("onRetain"));
      this.stateRegistry.decorator("onEnter", getStateHookBuilder("onEnter"));
      routerInstance = this;
    }

    UIRouterMarionette.prototype.addState = function(def) {
      this.stateRegistry.register(def);
      return this;
    };

    UIRouterMarionette.prototype.start = function(rootRegion) {
      this.rootRegion = rootRegion;
      if (this._started) {
        throw new Error("Router was already started");
      }
      this.rootRegion.uiView = new UIViewMarionette(this, null, this.rootRegion, "");
      this.rootRegion.uiView.register();
      this.urlMatcherFactory.$get();
      this.urlService.listen();
      this.urlService.sync();
      this._started = true;
      return this;
    };

    UIRouterMarionette.prototype.beforeBackboneRoute = function(beforeRouteCallback) {
      var originalRoute, uiRouter;
      if (typeof beforeRouteCallback !== 'function') {
        return;
      }
      originalRoute = Backbone.Router.prototype.route;
      uiRouter = this;
      return Backbone.Router.prototype.route = function(route, name, originalCallback) {
        var bbRouter, wrappedCallback;
        bbRouter = this;
        wrappedCallback = function() {
          var result, routeParams;
          routeParams = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          result = beforeRouteCallback.call(uiRouter, route, name, routeParams, uiRouter.stateService);
          if (_.isFunction(result != null ? result.then : void 0)) {
            return result.then(function() {
              return originalCallback.apply(bbRouter, routeParams);
            });
          } else {
            return originalCallback.apply(bbRouter, routeParams);
          }
        };
        return originalRoute.call(bbRouter, route, name, wrappedCallback);
      };
    };

    return UIRouterMarionette;

  })(UIRouter);

  exports.UIViewMarionette = UIViewMarionette;

  exports.Router = UIRouterMarionette;

}).call(this);
